if has('python2')
  silent! python3 1
endif
set nocompatible              " be iMproved, required
set wildignorecase
set tabstop=4 shiftwidth=4 expandtab
filetype off                  " required
filetype plugin on

" Re-map keys for splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Find and Shell
set rtp+=/usr/local/opt/fzf
set shell=/usr/local/bin/zsh

" Plug as a plugin managet
call plug#begin()
" Color theme
Plug 'NLKNguyen/papercolor-theme'
Plug 'christianchiarulli/nvcode-color-schemes.vim'
" General purpose
Plug 'jamessan/vim-gnupg'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'vim-voom/VOoM'
Plug 'junegunn/fzf.vim'
Plug 'ryanoasis/vim-devicons'
if has('nvim')
  Plug 'https://gitlab.com/Lenovsky/nuake.git'
endif
Plug 'dyng/ctrlsf.vim'
Plug 'hoob3rt/lualine.nvim'
Plug 'francoiscabrol/ranger.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'yaronkh/vim-winmanip'
Plug 'Yggdroot/indentLine'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'romgrk/barbar.nvim'
Plug 'mhinz/vim-startify'
Plug 'AndrewRadev/splitjoin.vim'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'stsewd/fzf-checkout.vim'
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/git-messenger.vim'

" Directory tree
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}

" General programming
Plug 'majutsushi/tagbar'
Plug 'Konfekt/FastFold'
Plug 'editorconfig/editorconfig-vim'
Plug 'steelsojka/completion-buffers'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSInstall python go bash typescript javascript yaml json toml regex lua'}
Plug 'nvim-treesitter/completion-treesitter'
Plug 'lukas-reineke/format.nvim'

" Languages & LSP
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'hashivim/vim-terraform'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'stephpy/vim-yaml'
Plug 'saltstack/salt-vim'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'andrewstuart/vim-kubernetes'
Plug 'Glench/Vim-Jinja2-Syntax'

function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction
Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
Plug 'ekalinin/Dockerfile.vim'

"" LSP support
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
" test
Plug 'glepnir/lspsaga.nvim'
Plug 'ojroques/nvim-lspfuzzy'
Plug 'ray-x/lsp_signature.nvim'

"" Text writing plugins
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

call plug#end()

"" User Functions

" Create user aliases with arguments
fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun

" Alias for NerdTree
call SetupCommandAlias("nt","NERDTree")
call SetupCommandAlias("ct","CHADopen")

" Alias for JSON pretty print
call SetupCommandAlias("ppj", "%!python -m json.tool")

" Configuration for Backspace key
set backspace=start,eol,indent

" Go to definition in vertical split
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


"" Theme config
" checks if your terminal has 24-bit color support
if (has("termguicolors"))
    set termguicolors
    hi LineNr ctermbg=NONE guibg=NONE
endif

let g:nvcode_termcolors=256
syntax on
colorscheme PaperColor
"colorscheme nvcode

set number
set background=dark
" Fix for Vimr
if match(expand('$VIM'), 'VimR.app') > -1
    " set true color
    set termguicolors
endif

"let g:PaperColor_Theme_Options = {
"  \   'language': {
"  \     'python': {
"  \       'highlight_builtins' : 1
"  \     },
"  \     'cpp': {
"  \       'highlight_standard_library': 1
"  \     },
"  \     'c': {
"  \       'highlight_builtins' : 1
"  \     }
"  \   }
"  \ }

set wildmenu
set wildmode=list:longest
set laststatus=2
set rtp+=$GOPATH/src/github.com/golang/lint/misc/vim
autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow

" Find and highlight trailing whitespaces
:match ExtraWhitespace /\s\+$/
:highlight ExtraWhitespace ctermbg=red guibg=red

set hlsearch
nnoremap <CR> :nohlsearch<CR><CR>

""" NERD Tree
"autocmd StdinReadPre * let s:std_in=1
""autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"let g:NERDTreeDirArrows = 1
"let g:NERDTreeDirArrowExpandable = '▸'
"let g:NERDTreeDirArrowCollapsible = '▾'
"let g:NERDTreeIgnore = ['^node_modules$', '^vendor$']

"" CHAD Tree
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | exe 'CHADopen' | endif
let g:chadtree_settings = { "options.follow": v:false }

"" Fugitive-vim config
let g:EditorConfig_exclude_patterns = ['scp://.*']

"" Golang
let $GOPATH = "/Users/yurii.rochniak/Golang"
let g:go_fmt_command = "goimports"
" let g:go_fmt_command = "gofmt"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>

"" FZF
let g:fzf_command_prefix = 'Fzf'
nnoremap <C-p> :FzfFiles<CR>

"" Ale
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_open_list = 1
let g:ale_list_window_size = 5
let g:ale_keep_list_window_open = 0
let g:ale_lint_on_save = 1
autocmd QuitPre * if empty(&bt) | lclose | endif
"let g:ale_linters = {
"  \ 'python': [
"  \   'flake8',
"  \   'pylint'],
"  \ 'go': [
"  \    'gopls']
"  \}

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Nuake
call SetupCommandAlias("term","Nuake")
let g:nuake_per_tab = 1
let g:nuake_size = 0.3
nnoremap <C-\> :Nuake<CR>
inoremap <C-\> <C-\><C-n>:Nuake<CR>
tnoremap <C-\> <C-\><C-n>:Nuake<CR>

" Test lightline
let g:lightline = {
      \   'enable': { 'statusline': 1, 'tabline': 0 },
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'readonly': 'LightlineReadonly',
      \ },
    \ }
function! LightlineReadonly()
  return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

"" Vagrantfile
augroup vagrant
	au!
	au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END

"" Markdown Composer
let g:markdown_composer_autostart = 0

" autosave delay, cursorhold trigger, default: 4000ms
setl updatetime=300

" highlight the word under cursor (CursorMoved is inperformant)
highlight WordUnderCursor cterm=underline gui=underline
autocmd CursorHold * call HighlightCursorWord()
function! HighlightCursorWord()
    " if hlsearch is active, don't overwrite it!
    let search = getreg('/')
    let cword = expand('<cword>')
    if match(cword, search) == -1
        exe printf('match WordUnderCursor /\V\<%s\>/', escape(cword, '/\'))
    endif
endfunction

"" VimR colorscheme set 
if has("gui_vimr")
  set termguicolors
  set background=dark
  colorscheme PaperColor
endif

"" Terraform plugin
let g:terraform_fmt_on_save = 1

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>

"" Terminal
tnoremap <Esc> <C-\><C-n>

let g:fzf_checkout_git_bin = 'git'

" Goyo
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Lua
" LSP
" Treesitter
lua <<EOF

local nvim_command = vim.api.nvim_command

local on_attach_vim = function(client)
  require'completion'.on_attach(client)
  nvim_command('autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()')
end

local lspconfig = require'lspconfig'
local configs = require'lspconfig/configs'

-- Setup diagnostics
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = false,
    underline = false,
    signs = true,
    update_in_insert = true,
  }
)
-- Groovy LSP is manual
configs.groovy_lsp = {
  default_config = {
    cmd = {'java', '-jar', '/Users/yurii.rochniak/sandbox/groovy-language-server/build/libs/groovy-language-server-all.jar'};
    filetypes = {'groovy'};
    root_dir = function(fname)
      return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()
    end;
    settings = {};
  };
}
require'lspconfig'.groovy_lsp.setup{on_attach=on_attach_vim}
require'lspconfig'.gopls.setup{
  on_attach=on_attach_vim,
  cmd = { "gopls", "-remote=auto" }
}
--- require'lspconfig'.pyls.setup{on_attach=on_attach_vim}
require'lspconfig'.yamlls.setup{on_attach=on_attach_vim}
require'lspconfig'.dockerls.setup{on_attach=on_attach_vim}
require'lspconfig'.bashls.setup{on_attach=on_attach_vim}
require'lspconfig'.jsonls.setup{on_attach=on_attach_vim}
require'lspconfig'.tsserver.setup{on_attach=on_attach_vim}
require'lspconfig'.bashls.setup{on_attach=on_attach_vim}

require('lspfuzzy').setup {}
require'lsp_signature'.on_attach()

require'nvim-treesitter.configs'.setup {
  ensure_installed = "all", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,
  },
}

require "format".setup {
    ["*"] = {
        {cmd = {"sed -i 's/[ \t]*$//'"}} -- remove trailing whitespace
    },
    vim = {
        {
            cmd = {"luafmt -w replace"},
            start_pattern = "^lua << EOF$",
            end_pattern = "^EOF$"
        }
    },
    vimwiki = {
        {
            cmd = {"prettier -w --parser babel"},
            start_pattern = "^{{{javascript$",
            end_pattern = "^}}}$"
        }
    },
    lua = {
        {
            cmd = {
                function(file)
                    return string.format("luafmt -l %s -w replace %s", vim.bo.textwidth, file)
                end
            }
        }
    },
    markdown = {
        {cmd = {"prettier -w"}},
        {
            cmd = {"black"},
            start_pattern = "^```python$",
            end_pattern = "^```$",
            target = "current"
        }
    }
}

local saga = require 'lspsaga'
saga.init_lsp_saga()
EOF

nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
"nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>

" Do not spawn too many instances of gopls
let g:go_gopls_enabled = 1
let g:go_gopls_options = ['-remote=auto']

" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect

let g:completion_chain_complete_list = [
    \{'complete_items': ['lsp', 'buffers']},
    \{'mode': '<c-p>'},
    \{'mode': '<c-n>'}
\]
let g:completion_auto_change_source = 1

" Avoid showing message extra message when using completion
set shortmess+=c

"augroup Format
"    autocmd!
"    autocmd BufWritePost * FormatWrite
"augroup END

let g:indentLine_enabled = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" barbar.nvim
let bufferline = {}
let bufferline.closable = v:false
let bufferline.clickable = v:false

" lualine
let g:lualine = {
    \'options' : {
    \  'theme' : 'papercolor_dark',
    \  'section_separators' : ['', ''],
    \  'component_separators' : ['|', '|'],
    \  'icons_enabled' : v:true,
    \},
    \'sections' : {
    \  'lualine_a' : [ ['mode', {'upper': v:true,},], ],
    \  'lualine_b' : [ ['branch', {'icon': '',}, ], ],
    \  'lualine_c' : [ ['filename', {'file_status': v:true,},], ],
    \  'lualine_x' : [ 'encoding', 'fileformat', 'filetype' ],
    \  'lualine_y' : [ 'progress' ],
    \  'lualine_z' : [ 'location'  ],
    \},
    \'inactive_sections' : {
    \  'lualine_a' : [  ],
    \  'lualine_b' : [  ],
    \  'lualine_c' : [ 'filename' ],
    \  'lualine_x' : [ 'location' ],
    \  'lualine_y' : [  ],
    \  'lualine_z' : [  ],
    \},
    \'extensions' : [ 'fzf' ],
    \}
lua require("lualine").setup()
